// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id       String          @id @default(cuid()) @map("_id")
  name     String
  price    Float
  stock    Int
  category ProductCategory
  Cart     Cart?           @relation(fields: [cartId], references: [id])
  cartId   String?
  Review   Review[]
  CartItem CartItem[]
  Tool     Tool[]
  Grocery  Grocery[]
}

model Tool {
  id       String   @id @default(cuid()) @map("_id")
  product  Product  @relation(fields: [id], references: [id])
  toolType ToolType
}

model Grocery {
  id             String      @id @default(cuid()) @map("_id")
  product        Product     @relation(fields: [id], references: [id])
  groceryType    GroceryType
  expirationDate DateTime
}

model Outfits{
  id     String     @id @default(cuid()) @map("_id")
  outfitType OutfitType
  
}

model User {
  id              String           @id @default(cuid()) @map("_id")
  email           String           @unique
  password        String
  name            String?
  role            UserRole
  customer        Customer?
  customerService CustomerService?
  productSeller  ProductSeller?
  Complaint       Complaint[]
  Reply           Reply[]
}

model Customer {
  id              String            @id @default(cuid()) @map("_id")
  user            User              @relation(fields: [id], references: [id])
  cart            Cart?
  purchaseHistory PurchaseHistory[]
  reviews         Review[]
  complaints      Complaint[]
  replies         Reply[]
}

model ProductSeller{
  id              String            @id @default(cuid()) @map("_id")
  user            User              @relation(fields: [id], references: [id])
  category        ProductCategory
}

model CustomerService {
  id      String  @id @default(cuid()) @map("_id")
  user    User    @relation(fields: [id], references: [id])
  replies Reply[]
}

model Complaint {
  id         String    @id @default(cuid()) @map("_id")
  title      String
  text       String
  date       DateTime  @default(now())
  status     Boolean // if it's resolved or not (can only be changed by the cutomer service) could be enum
  author     User      @relation(fields: [authorId], references: [id]) // customer tht wrote the complaint
  authorId   String
  replies    Reply[]
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

model Reply {
  id                String           @id @default(cuid()) @map("_id")
  text              String
  date              DateTime         @default(now())
  author            User             @relation(fields: [authorId], references: [id]) // want it to be customer :/
  authorId          String
  complaint         Complaint        @relation(fields: [complaintId], references: [id])
  complaintId       String
  Customer          Customer?        @relation(fields: [customerId], references: [id])
  customerId        String?
  CustomerService   CustomerService? @relation(fields: [customerServiceId], references: [id])
  customerServiceId String?
}

model Cart {
  id              String            @id @default(cuid()) @map("_id")
  customerId      String            @unique
  customer        Customer          @relation(fields: [customerId], references: [id])
  cartItems       CartItem[]
  Product         Product[]
  PurchaseHistory PurchaseHistory[]
}

model CartItem {
  id        String  @id @default(cuid()) @map("_id")
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
}

model PurchaseHistory {
  id         String   @id @default(cuid()) @map("_id")
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  items      Json
  total      Float
  createdAt  DateTime @default(now())
  Cart       Cart?    @relation(fields: [cartId], references: [id])
  cartId     String?
}

model Review {
  id         String   @id @default(cuid()) @map("_id")
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  rating     Int
  customerId String
  productId  String
}

enum ProductCategory {
  OUTFITS
  GROCERIES
  TOOLS
}

enum ToolType {
  HAND_TOOL
  POWER_TOOL
}

enum GroceryType {
  BEVERAGE
  BAKED_GOOD
  CANNED_GOOD
  DAIRY
  BAKING_GOOD
  FROZEN_GOOD
  MEATS
}

enum UserRole {
  PRODUCTS_SELLLER
  CUSTOMER_SERVICE
  CUSTOMER
}

enum OutfitType {
  WINTER_OUTFITS 
  SUMMER_OUTFITS 
}